ZiLOG ZNeo ANSI C Compiler Version 1.10	Mar  1 2011	23:16:23	page: 1
Local	Global	File: C:\USERS\MATT\DOCUMENTS\CSCI-4415-LABS\HARLAN-LAB3\LED.C

     1	    1	#include "LED.h"
     2	   46	#include "LED_ascii.h"
     3	  911	#include "timer.h"
     4	  990	
     5	  991	#include <zneo.h>
     6	 1517	#include <stdlib.h>
     7	 1640	#include <stdio.h>
     8	 2486	#include <string.h>
     9	 2578	
    10	 2579	#define ASCII_SPACE  0
    11	 2580	#define ASCII_OFFSET 0x20
    12	 2581	#define NUM_LEDS     4
    13	 2582	
    14	 2583	//time in seconds
    15	 2584	#define SCROLL_CUTOFF 400
    16	 2585	
    17	 2586	#define LED_DEC_MAX  9999
    18	 2587	#define LED_HEX_MAX  0xFFFF
    19	 2588	
    20	 2589	#define NUM_ANODES   7
    21	 2590	#define D1           0
    22	 2591	#define D2           1
    23	 2592	#define D3           2
    24	 2593	#define D4           3
    25	 2594	
    26	 2595	#define MAX_DIGITS 16  //Max digits for number displayed on LED
    27	 2596	
    28	 2597	static unsigned char *led_msg;
    29	 2598	static size_t msg_size;
    30	 2599	
    31	 2600	static unsigned int draw_char[NUM_LEDS];
    32	 2601	static volatile unsigned int msg_pos;
    33	 2602	static volatile unsigned int row_pos;
    34	 2603	
    35	 2604	static volatile int led_scroll_timer;
    36	 2605	static int led_scroll_cutoff;
    37	 2606	
    38	 2607	//values for selecting each LED row
    39	 2608	static unsigned int led_anode[NUM_ANODES] =
    40	 2609	{
    41	 2610		0x01,
    42	 2611		0x02,
    43	 2612		0x04,
    44	 2613		0x08,
    45	 2614		0x10,
    46	 2615		0x20,
    47	 2616		0x40
    48	 2617	};
    49	 2618	
    50	 2619	static void led_scroll_draw_chars(void);
    51	 2620	static void led_set_draw_chars(void);
    52	 2621	static void led_draw_row(int led_id);
    53	 2622	
    54	 2623	void init_leds(void) 
    55	 2624	{ 
ZiLOG ZNeo ANSI C Compiler Version 1.10	Mar  1 2011	23:16:23	page: 2
Local	Global	File: C:\USERS\MATT\DOCUMENTS\CSCI-4415-LABS\HARLAN-LAB3\LED.C

    56	 2625	    PEDD = 0x00;	// data direction = outputs	
    57	 2626		PGDD = 0x00;
    58	 2627	
    59	 2628		led_scroll_timer = 0;
    60	 2629		led_scroll_cutoff = SCROLL_CUTOFF;
    61	 2630	
    62	 2631		//set LED display defaults
    63	 2632		led_msg = NULL;
    64	 2633	
    65	 2634		msg_size = 0;
    66	 2635		draw_char[0] = ASCII_SPACE;
    67	 2636		draw_char[1] = ASCII_SPACE;
    68	 2637		draw_char[2] = ASCII_SPACE;
    69	 2638		draw_char[3] = ASCII_SPACE;
    70	 2639	}
    71	 2640	
    72	 2641	void led_update(void)
    73	 2642	{
    74	 2643		led_scroll_timer += timer_interval_int();
    75	 2644	
    76	 2645		//updates the characters being displayed at timer_cutoff interval
    77	 2646		if((msg_size > 4) && 
    78	 2647		   (led_scroll_timer >= led_scroll_cutoff)) {
    79	 2648			led_scroll_timer = 0;
    80	 2649	
    81	 2650			led_scroll_draw_chars();
    82	 2651		}
    83	 2652	
    84	 2653		//draw the current row for each LED
    85	 2654		led_draw_row(D1);
    86	 2655		led_draw_row(D2);
    87	 2656		led_draw_row(D3);
    88	 2657		led_draw_row(D4);
    89	 2658	
    90	 2659		//move to the next row for next time
    91	 2660		row_pos = (row_pos + 1) % NUM_ANODES;
    92	 2661	}
    93	 2662	
    94	 2663	void led_set_scroll_cutoff(int ms)
    95	 2664	{
    96	 2665		led_scroll_cutoff = ms;
    97	 2666	}
    98	 2667	
    99	 2668	void led_display_text(const unsigned char *msg)
   100	 2669	{
   101	 2670		char *new_msg;
   102	 2671	
   103	 2672		msg_size = strlen(msg);
   104	 2673		new_msg = malloc(sizeof(*new_msg) * (msg_size + 2));	//+2 for space pad and null terminator
   105	 2674		if(!new_msg) {
   106	 2675			msg_size = 0;
   107	 2676		}
   108	 2677		else {
   109	 2678			memcpy(new_msg, msg, msg_size);
   110	 2679	
ZiLOG ZNeo ANSI C Compiler Version 1.10	Mar  1 2011	23:16:23	page: 3
Local	Global	File: C:\USERS\MATT\DOCUMENTS\CSCI-4415-LABS\HARLAN-LAB3\LED.C

   111	 2680			//space pads the wrap-around
   112	 2681			if(msg_size > 4) {
   113	 2682				new_msg[msg_size] = ' ';
   114	 2683				++msg_size;
   115	 2684			}
   116	 2685			new_msg[msg_size] = '\0';
   117	 2686	
   118	 2687			DI();
   119	 2688			
   120	 2689			if(led_msg != NULL) {
   121	 2690				free(led_msg);
   122	 2691			}
   123	 2692			
   124	 2693			led_msg = new_msg;
   125	 2694			msg_pos = 0;
   126	 2695			row_pos = 0;
   127	 2696			led_set_draw_chars();
   128	 2697	
   129	 2698			EI();
   130	 2699		}
   131	 2700	}
   132	 2701	
   133	 2702	void led_display_double(double value)
   134	 2703	{
   135	 2704		unsigned char num_msg[MAX_DIGITS];
   136	 2705	
   137	 2706		sprintf(num_msg, "%f", value);
   138	 2707	
   139	 2708		led_display_text(num_msg);
   140	 2709	}
   141	 2710	
   142	 2711	void led_display_int(int value)
   143	 2712	{
   144	 2713		unsigned char num_msg[MAX_DIGITS];
   145	 2714	
   146	 2715		sprintf(num_msg, "%d", value);
   147	 2716	
   148	 2717		led_display_text(num_msg);
   149	 2718	}
   150	 2719	
   151	 2720	void led_display_int_hex(int value)
   152	 2721	{
   153	 2722		unsigned char num_msg[MAX_DIGITS];
   154	 2723	
   155	 2724		sprintf(num_msg, "%X", value);
   156	 2725	
   157	 2726		led_display_text(num_msg);
   158	 2727	}
   159	 2728	
   160	 2729	/*
   161	 2730	 	Draws the current row to a particular LED
   162	 2731	 */
   163	 2732	static void led_draw_row(int led_id)
   164	 2733	{
   165	 2734		// set cathodes
ZiLOG ZNeo ANSI C Compiler Version 1.10	Mar  1 2011	23:16:23	page: 4
Local	Global	File: C:\USERS\MATT\DOCUMENTS\CSCI-4415-LABS\HARLAN-LAB3\LED.C

   166	 2735		PEOUT |= 0x1F;
   167	 2736		PEOUT &= ~char_data[draw_char[led_id]][row_pos];
   168	 2737	
   169	 2738		// set anodes
   170	 2739		PGOUT &= 0x80;
   171	 2740		PGOUT |= led_anode[row_pos];
   172	 2741	
   173	 2742		//latch the LED
   174	 2743		if(led_id == D1) {               // PE7 controls D1
   175	 2744	        PEOUT &= ~0x80;           //   create rising edge on PE7, clear bit 7
   176	 2745	        PEOUT |= 0x80;            //   set bit 7
   177	 2746	    }
   178	 2747	    else if(led_id == D2) {               // PG7 controls D2
   179	 2748	        PGOUT &= ~0x80;           //   create rising edge on PG7
   180	 2749	        PGOUT |= 0x80; 
   181	 2750	    }
   182	 2751	    else if(led_id == D3) {               // PE5 controls D3
   183	 2752	        PEOUT &= ~0x20;           //   create rising edge on PE5
   184	 2753	        PEOUT |= 0x20; 
   185	 2754	    }
   186	 2755	    else if(led_id == D4) {               // PE6 controls D4
   187	 2756	        PEOUT &= ~0x40;           //   create rising edge on PE6
   188	 2757	        PEOUT |= 0x40; 
   189	 2758	    }
   190	 2759	}
   191	 2760	
   192	 2761	/*
   193	 2762		Updates what characters the LED is drawing.
   194	 2763	 */
   195	 2764	static void led_scroll_draw_chars(void)
   196	 2765	{
   197	 2766		//update what each led is drawing
   198	 2767		draw_char[0] = ((unsigned int)led_msg[msg_pos]) - ASCII_OFFSET;
   199	 2768		draw_char[1] = ((unsigned int)led_msg[(msg_pos + 1) % msg_size]) - ASCII_OFFSET;
   200	 2769		draw_char[2] = ((unsigned int)led_msg[(msg_pos + 2) % msg_size]) - ASCII_OFFSET;
   201	 2770		draw_char[3] = ((unsigned int)led_msg[(msg_pos + 3) % msg_size]) - ASCII_OFFSET;
   202	 2771		msg_pos = (msg_pos + 1) % msg_size;
   203	 2772	}
   204	 2773	
   205	 2774	/*
   206	 2775		Sets the characters the LED is drawing to the first 4 of the message.
   207	 2776	 */
   208	 2777	static void led_set_draw_chars(void)
   209	 2778	{
   210	 2779		if(msg_size > 0) {
   211	 2780			draw_char[0] = ((unsigned int)led_msg[msg_pos]) - ASCII_OFFSET;
   212	 2781		}
   213	 2782		else {
   214	 2783			draw_char[0] = ASCII_SPACE;
   215	 2784		}
   216	 2785		
   217	 2786		if(msg_size > 1) {
   218	 2787			draw_char[1] = ((unsigned int)led_msg[(msg_pos + 1) % msg_size]) - ASCII_OFFSET;
   219	 2788		}
   220	 2789		else {
ZiLOG ZNeo ANSI C Compiler Version 1.10	Mar  1 2011	23:16:23	page: 5
Local	Global	File: C:\USERS\MATT\DOCUMENTS\CSCI-4415-LABS\HARLAN-LAB3\LED.C

   221	 2790			draw_char[1] = ASCII_SPACE;
   222	 2791		}
   223	 2792		
   224	 2793		if(msg_size > 2) {
   225	 2794			draw_char[2] = ((unsigned int)led_msg[(msg_pos + 2) % msg_size]) - ASCII_OFFSET;
   226	 2795		}
   227	 2796		else {
   228	 2797			draw_char[2] = ASCII_SPACE;
   229	 2798		}
   230	 2799		
   231	 2800		if(msg_size > 3) {
   232	 2801			draw_char[3] = ((unsigned int)led_msg[(msg_pos + 3) % msg_size]) - ASCII_OFFSET;
   233	 2802		}
   234	 2803		else {
   235	 2804			draw_char[3] = ASCII_SPACE;
   236	 2805		}
   237	 2806	}
   238	 2807	ÿ
