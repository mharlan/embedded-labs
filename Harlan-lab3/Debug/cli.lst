ZiLOG ZNEO Macro Assembler Version 1.10 (07022203)                                               27-Feb-11     17:33:57     page:   1


PC     Object              I  Line    Source 
                           A     1    ; ZiLOG ZNEO ANSI C Compiler Release 1.11
                           A     2    ; -nolocalcse -optsize -model=S -nomodsect -noregvar
                           A     3    ; -reduceopt -debug -peephole -const=ROM -alias -fastcall
                           A     4    	FILE	"..\CLI.C"
                           A     5    .debug "C"
                           A     6    	SEGMENT NEAR_BSS
00000000                   A     7    _cli_prompt:
00000000                   A     8    	DS	256
                           A     9    .define "cli_prompt"
                           A    10    .alias "_cli_prompt"
                           A    11    .class 147
                           A    12    .value _cli_prompt
                           A    13    .dim 256
                           A    14    .type 108
                           A    15    .type 0
                           A    16    .endef
                           A    17    	SEGMENT CODE
                           A    18    .begrec "NONAME0",8
                           A    19    .define "quot"
                           A    20    .value 0
                           A    21    .class 8
                           A    22    .type 5
                           A    23    .type 0
                           A    24    .endef
                           A    25    .define "rem"
                           A    26    .value 4
                           A    27    .class 8
                           A    28    .type 5
                           A    29    .type 0
                           A    30    .endef
                           A    31    .endrec "NONAME0"
                           A    32    .begrec "NONAME1",8
                           A    33    .define "quot"
                           A    34    .value 0
                           A    35    .class 8
                           A    36    .type 5
                           A    37    .type 0
                           A    38    .endef
                           A    39    .define "rem"
                           A    40    .value 4
                           A    41    .class 8
                           A    42    .type 5
                           A    43    .type 0
                           A    44    .endef
                           A    45    .endrec "NONAME1"
                           A    46    	SEGMENT ROM_TEXT
00000000                   A    47    L__0:
00000000 3E20              A    48    	DB	"> "
00000002 00                A    49    	DB	0
                           A    50    ;    1	#include "cli.h"
                           A    51    ;    2	#include "LED.h"
                           A    52    ;    3	#include "uart.h"
ZiLOG ZNEO Macro Assembler Version 1.10 (07022203)                                               27-Feb-11     17:33:57     page:   2


PC     Object              I  Line    Source cli.src
                           A    53    ;    4	#include "info.h"
                           A    54    ;    5	
                           A    55    ;    6	#include <stdlib.h>
                           A    56    ;    7	#include <string.h>
                           A    57    ;    8	#include <ctype.h>
                           A    58    ;    9	
                           A    59    ;   10	#define CLI_PROMPT      "> "
                           A    60    ;   11	#define CLI_BUFFER_SIZE 256
                           A    61    ;   12	
                           A    62    ;   13	#define ASCII_DEL 0x7F
                           A    63    ;   14	
                           A    64    ;   15	static char cli_prompt[CLI_BUFFER_SIZE];
                           A    65    	SEGMENT CODE
                           A    66    ;   16	
                           A    67    ;   17	static void cli_process_command(const char *command);
                           A    68    ;   18	
                           A    69    ;   19	/*
                           A    70    ;   20		Zero arguement CLI functions.
                           A    71    ;   21	 */
                           A    72    ;   22	static void cli_command_info(void);
                           A    73    ;   23	static void cli_command_question(void);
                           A    74    ;   24	
                           A    75    ;   25	/*
                           A    76    ;   26		Variable arguement CLI functions.
                           A    77    ;   27	
                           A    78    ;   28		Multiple arguements encoded as strings, separated by
                           A    79    ;   29		whitespace and quotes.
                           A    80    ;   30	 */
                           A    81    ;   31	static void cli_command_echo(char *text);
                           A    82    ;   32	static void cli_command_display(char *text);
                           A    83    ;   33	static void cli_command_hex(char *text);
                           A    84    ;   34	
                           A    85    ;   35	void init_cli(void)
                           A    86    ;   36	{
00000000                   A    87    _init_cli:
                           A    88    .define "_init_cli"
                           A    89    .value _init_cli
                           A    90    .class 2
                           A    91    .type 65
                           A    92    .type 0
                           A    93    .endef
                           A    94    .begfunc "init_cli",36,"_init_cli"
00000000 0800              A    95    	LINK	#0
                           A    96    ;   37		//initialize the hardware
                           A    97    ;   38		init_leds();
                           A    98    .line 38
00000002 F1 FFFFFD         A    99    	CALL	_init_leds
                           A   100    ;   39		init_uart();
                           A   101    .line 39
00000006 F1 FFFFFB         A   102    	CALL	_init_uart
                           A   103    ;   40		init_info();
                           A   104    .line 40
ZiLOG ZNEO Macro Assembler Version 1.10 (07022203)                                               27-Feb-11     17:33:57     page:   3


PC     Object              I  Line    Source cli.src
0000000A F1 FFFFF9         A   105    	CALL	_init_info
                           A   106    ;   41	
                           A   107    ;   42		strcpy(cli_prompt, CLI_PROMPT);
                           A   108    .line 42
0000000E 4511 0000         A   109    	LD	R1,#_cli_prompt
00000012 4502 0000         A   110    	LD	R2,#L__0
00000016 F1 FFFFF3         A   111    	CALL	_strcpy
                           A   112    ;   43	}
                           A   113    .line 43
0000001A 0001              A   114    	UNLINK	
0000001C FFFC              A   115    	RET	
                           A   116    
                           A   117    
                           A   118    ;**************************** _init_cli ***************************
                           A   119    ;Name                         Addr/Register   Size   Type
                           A   120    ;_cli_prompt                         STATIC    256   variable
                           A   121    ;_strcpy                             IMPORT  -----   function
                           A   122    ;_init_info                          IMPORT  -----   function
                           A   123    ;_init_uart                          IMPORT  -----   function
                           A   124    ;_init_leds                          IMPORT  -----   function
                           A   125    
                           A   126    
                           A   127    ; Aggregate Stack Size: 0 (words)
                           A   128    
                           A   129    
                           A   130    .endfunc "init_cli",43,"_init_cli"
                           A   131    	SEGMENT ROM_TEXT
00000003                   A   132    L__2:
00000003 2573              A   133    	DB	"%s"
00000005 00                A   134    	DB	0
00000006                   A   135    L__6:
00000006 2573              A   136    	DB	"%s"
00000008 00                A   137    	DB	0
00000009                   A   138    L__12:
00000009 0A                A   139    	DB	10
0000000A 2D2D4572          A   140    	DB	"--Error--, command is too long. Command ignored."
0000000E 726F722D 
00000012 2D2C2063 
00000016 6F6D6D61 
0000001A 6E642069 
0000001E 7320746F 
00000022 6F206C6F 
00000026 6E672E20 
0000002A 436F6D6D 
0000002E 616E6420 
00000032 69676E6F 
00000036 7265642E 
0000003A 0A00              A   141    	DB	10,0
0000003C                   A   142    L__13:
0000003C 2573              A   143    	DB	"%s"
0000003E 00                A   144    	DB	0
                           A   145    	SEGMENT CODE
ZiLOG ZNEO Macro Assembler Version 1.10 (07022203)                                               27-Feb-11     17:33:57     page:   4


PC     Object              I  Line    Source cli.src
                           A   146    ;   44	
                           A   147    ;   45	void cli_loop(void)
                           A   148    ;   46	{
0000001E                   A   149    _cli_loop:
                           A   150    .define "_cli_loop"
                           A   151    .value _cli_loop
                           A   152    .class 2
                           A   153    .type 65
                           A   154    .type 0
                           A   155    .endef
                           A   156    .begfunc "cli_loop",46,"_cli_loop"
                           A   157    .line 46
                           A   158    .define "c"
                           A   159    .class 1
                           A   160    .value -1
                           A   161    .type 12
                           A   162    .type 0
                           A   163    .endef
                           A   164    .define "buffer_pos"
                           A   165    .class 1
                           A   166    .value -5
                           A   167    .type 5
                           A   168    .type 0
                           A   169    .endef
                           A   170    .define "buffer"
                           A   171    .class 1
                           A   172    .value -261
                           A   173    .dim 256
                           A   174    .type 108
                           A   175    .type 0
                           A   176    .endef
0000001E 0800              A   177    	LINK	#0
00000020 AA1F 0105         A   178    	SUB	R15,#261
                           A   179    ;   47		char buffer[CLI_BUFFER_SIZE];
                           A   180    ;   48		char c;
                           A   181    ;   49	
                           A   182    ;   50		int buffer_pos;
                           A   183    ;   51	
                           A   184    ;   52		uart_printf("%s", cli_prompt);
                           A   185    .line 52
00000024 098F 0000         A   186    	PUSH.W	#_cli_prompt
00000028 098F 0003         A   187    	PUSH.W	#L__2
0000002C F1 FFFFE8         A   188    	CALL	_uart_printf
00000030 8F04              A   189    	ADD	R15,#4
                           A   190    ;   53	
                           A   191    ;   54		buffer_pos = 0;
                           A   192    .line 54
00000032 ADCE BFFB         A   193    	CLR	-5(R14)
                           A   194    ;   55	
                           A   195    ;   56		while(1) {
00000036                   A   196    _2_L_18:
                           A   197    .line 56
ZiLOG ZNEO Macro Assembler Version 1.10 (07022203)                                               27-Feb-11     17:33:57     page:   5


PC     Object              I  Line    Source cli.src
                           A   198    ;   57			//wait until a character is available
                           A   199    ;   58			while((c = uart_getchar()) == 0) { ; }
00000036                   A   200    _2_L_1:
                           A   201    .line 58
00000036 F1 FFFFE3         A   202    	CALL	_uart_getchar
0000003A 53F0              A   203    	LD.B	-1(R14),R0
0000003C ADDE 3FFF         A   204    	CPZ.B	-1(R14)
00000040 E6 FA             A   205    	JP	EQ,_2_L_1
                           A   206    ;   59	
                           A   207    ;   60			//new line means end of the command
                           A   208    ;   61			if(c == '\n') {
                           A   209    .line 61
00000042 300A              A   210    	LD	R0,#10
00000044 7D0E BFFF         A   211    	CP.B	-1(R14),R0
00000048 EE 1C             A   212    	JP	NE,_2_L_14
                           A   213    ;   62				//only process a command if something was entered
                           A   214    ;   63				if(buffer_pos) {
                           A   215    .line 63
0000004A ADDE BFFB         A   216    	CPZ	-5(R14)
0000004E E6 08             A   217    	JP	EQ,_2_L_4
                           A   218    ;   64					buffer[buffer_pos] = '\0';
                           A   219    .line 64
00000050 6FD0              A   220    	LD.SW	R0,-3(R14)
00000052 48E1 BEFB         A   221    	LEA	R1,-261(R14)
00000056 A010              A   222    	ADD	R0,R1
00000058 AC00              A   223    	CLR.B	(R0)
                           A   224    ;   65					cli_process_command(buffer);
                           A   225    .line 65
0000005A 48E1 BEFB         A   226    	LEA	R1,-261(R14)
0000005E D04F              A   227    	CALL	_cli_process_command
                           A   228    ;   66				}
00000060                   A   229    _2_L_4:
                           A   230    .line 66
                           A   231    ;   67	
                           A   232    ;   68				buffer_pos = 0;
                           A   233    .line 68
00000060 ADCE BFFB         A   234    	CLR	-5(R14)
                           A   235    ;   69				memset(buffer, 0, CLI_BUFFER_SIZE);
                           A   236    .line 69
00000064 48E1 BEFB         A   237    	LEA	R1,-261(R14)
00000068 3200              A   238    	LD	R2,#0
0000006A 4503 0100         A   239    	LD	R3,#256
0000006E F1 FFFFC7         A   240    	CALL	_memset
                           A   241    ;   70	
                           A   242    ;   71				uart_printf("%s", cli_prompt);
                           A   243    .line 71
00000072 098F 0000         A   244    	PUSH.W	#_cli_prompt
00000076 098F 0006         A   245    	PUSH.W	#L__6
0000007A F1 FFFFC1         A   246    	CALL	_uart_printf
0000007E 8F04              A   247    	ADD	R15,#4
                           A   248    ;   72			}
                           A   249    ;   73			//there is more to come...
ZiLOG ZNEO Macro Assembler Version 1.10 (07022203)                                               27-Feb-11     17:33:57     page:   6


PC     Object              I  Line    Source cli.src
                           A   250    ;   74			else if(isgraph(c) || isspace(c)) {
                           A   251    .line 74
00000080 C021              A   252    	JP	_2_L_17
00000082                   A   253    _2_L_14:
00000082 63F1              A   254    	LD.UB	R1,-1(R14)
00000084 F1 FFFFBC         A   255    	CALL	_isgraph
00000088 9000              A   256    	CP	R0,#0
0000008A EE 05             A   257    	JP	NE,_2_L_11
0000008C 63F1              A   258    	LD.UB	R1,-1(R14)
0000008E F1 FFFFB7         A   259    	CALL	_isspace
00000092 9000              A   260    	CP	R0,#0
00000094 E6 09             A   261    	JP	EQ,_2_L_12
00000096                   A   262    _2_L_11:
                           A   263    ;   75				buffer[buffer_pos++] = c;
                           A   264    .line 75
00000096 5FB0              A   265    	LD	R0,-5(R14)
00000098 48E1 BEFB         A   266    	LEA	R1,-261(R14)
0000009C A010              A   267    	ADD	R0,R1
0000009E 6BF1              A   268    	LD.SB	R1,-1(R14)
000000A0 0E10              A   269    	LD.B	(R0),R1
000000A2 ADEE BFFB         A   270    	INC	-5(R14)
                           A   271    ;   76			}
                           A   272    ;   77			//
                           A   273    ;   78			else if(c == ASCII_DEL) {
                           A   274    .line 78
000000A6 C00E              A   275    	JP	_2_L_17
000000A8                   A   276    _2_L_12:
000000A8 307F              A   277    	LD	R0,#127
000000AA 7D0E BFFF         A   278    	CP.B	-1(R14),R0
000000AE EE C3             A   279    	JP	NE,_2_L_18
                           A   280    ;   79				if(buffer_pos) {
                           A   281    .line 79
000000B0 ADDE BFFB         A   282    	CPZ	-5(R14)
000000B4 E6 07             A   283    	JP	EQ,_2_L_17
                           A   284    ;   80					buffer_pos--;
                           A   285    .line 80
000000B6 ADFE BFFB         A   286    	DEC	-5(R14)
                           A   287    ;   81					buffer[buffer_pos] = '\0';
                           A   288    .line 81
000000BA 6FD0              A   289    	LD.SW	R0,-3(R14)
000000BC 48E1 BEFB         A   290    	LEA	R1,-261(R14)
000000C0 A010              A   291    	ADD	R0,R1
000000C2 AC00              A   292    	CLR.B	(R0)
                           A   293    ;   82				}
                           A   294    ;   83			}
                           A   295    ;   84			//ignore for now
                           A   296    ;   85			else {
                           A   297    .line 85
                           A   298    ;   86				continue;
                           A   299    ;   87			}
000000C4                   A   300    _2_L_17:
                           A   301    .line 87
ZiLOG ZNEO Macro Assembler Version 1.10 (07022203)                                               27-Feb-11     17:33:57     page:   7


PC     Object              I  Line    Source cli.src
                           A   302    ;   88	
                           A   303    ;   89			//is the command too long?
                           A   304    ;   90			if(buffer_pos >= CLI_BUFFER_SIZE) {
                           A   305    .line 90
000000C4 4500 0100         A   306    	LD	R0,#256
000000C8 7D0E FFFB         A   307    	CP	-5(R14),R0
000000CC E1 B4             A   308    	JP	LT,_2_L_18
                           A   309    ;   91				uart_printf("\n--Error--, command is too long. Command ignored.\n");
                           A   310    .line 91
000000CE 098F 0009         A   311    	PUSH.W	#L__12
000000D2 F1 FFFF95         A   312    	CALL	_uart_printf
000000D6 8F02              A   313    	ADD	R15,#2
                           A   314    ;   92				
                           A   315    ;   93				buffer_pos = 0;
                           A   316    .line 93
000000D8 ADCE BFFB         A   317    	CLR	-5(R14)
                           A   318    ;   94				memset(buffer, 0, CLI_BUFFER_SIZE);
                           A   319    .line 94
000000DC 48E1 BEFB         A   320    	LEA	R1,-261(R14)
000000E0 3200              A   321    	LD	R2,#0
000000E2 4503 0100         A   322    	LD	R3,#256
000000E6 F1 FFFF8B         A   323    	CALL	_memset
                           A   324    ;   95	
                           A   325    ;   96				uart_printf("%s", cli_prompt);
                           A   326    .line 96
000000EA 098F 0000         A   327    	PUSH.W	#_cli_prompt
000000EE 098F 003C         A   328    	PUSH.W	#L__13
000000F2 F1 FFFF85         A   329    	CALL	_uart_printf
000000F6 8F04              A   330    	ADD	R15,#4
                           A   331    ;   97			}
                           A   332    ;   98		}
                           A   333    .line 98
000000F8 CF9E              A   334    	JP	_2_L_18
                           A   335    ;   99	}
                           A   336    .line 99
000000FA 0001              A   337    	UNLINK	
000000FC FFFC              A   338    	RET	
                           A   339    
                           A   340    
                           A   341    ;**************************** _cli_loop ***************************
                           A   342    ;Name                         Addr/Register   Size   Type
                           A   343    ;_isspace                            IMPORT  -----   function
                           A   344    ;_isgraph                            IMPORT  -----   function
                           A   345    ;_memset                             IMPORT  -----   function
                           A   346    ;_cli_process_command                STATIC  -----   function
                           A   347    ;_uart_getchar                       IMPORT  -----   function
                           A   348    ;_cli_prompt                         STATIC    256   variable
                           A   349    ;_uart_printf                        IMPORT  -----   function
                           A   350    ;buffer                             R14-261    256   variable
                           A   351    ;buffer_pos                           R14-5      4   variable
                           A   352    ;c                                    R14-1      1   variable
                           A   353    
ZiLOG ZNEO Macro Assembler Version 1.10 (07022203)                                               27-Feb-11     17:33:57     page:   8


PC     Object              I  Line    Source cli.src
                           A   354    
                           A   355    ; Aggregate Stack Size: -261 (words)
                           A   356    
                           A   357    
                           A   358    .endfunc "cli_loop",99,"_cli_loop"
                           A   359    	SEGMENT ROM_TEXT
0000003F                   A   360    L__19:
0000003F 696E666F          A   361    	DB	"info"
00000043 00                A   362    	DB	0
00000044                   A   363    L__21:
00000044 3F                A   364    	DB	"?"
00000045 00                A   365    	DB	0
00000046                   A   366    L__23:
00000046 6563686F          A   367    	DB	"echo"
0000004A 00                A   368    	DB	0
0000004B                   A   369    L__25:
0000004B 64697370 6C6179   A   370    	DB	"display"
00000052 00                A   371    	DB	0
00000053                   A   372    L__27:
00000053 736574            A   373    	DB	"set"
00000056 00                A   374    	DB	0
00000057                   A   375    L__29:
00000057 686578            A   376    	DB	"hex"
0000005A 00                A   377    	DB	0
0000005B                   A   378    L__31:
0000005B 736574            A   379    	DB	"set"
0000005E 00                A   380    	DB	0
0000005F                   A   381    L__33:
0000005F 73776974 6368     A   382    	DB	"switch"
00000065 00                A   383    	DB	0
00000066                   A   384    L__35:
00000066 706F7274          A   385    	DB	"port"
0000006A 00                A   386    	DB	0
0000006B                   A   387    L__37:
0000006B 74696D65 72       A   388    	DB	"timer"
00000070 00                A   389    	DB	0
00000071                   A   390    L__39:
00000071 75617274 30       A   391    	DB	"uart0"
00000076 00                A   392    	DB	0
00000077                   A   393    L__41:
00000077 2D2D436F          A   394    	DB	"--Command:%s, not found. Enter \"?\" to see a list of available commands."
0000007B 6D6D616E 
0000007F 643A2573 
00000083 2C206E6F 
00000087 7420666F 
0000008B 756E642E 
0000008F 20456E74 
00000093 65722022 
00000097 3F222074 
0000009B 6F207365 
0000009F 65206120 
000000A3 6C697374 
ZiLOG ZNEO Macro Assembler Version 1.10 (07022203)                                               27-Feb-11     17:33:57     page:   9


PC     Object              I  Line    Source cli.src
000000A7 206F6620 
000000AB 61766169 
000000AF 6C61626C 
000000B3 6520636F 
000000B7 6D6D616E 64732E 
000000BE 0A00              A   395    	DB	10,0
                           A   396    	SEGMENT CODE
                           A   397    ;  100	
                           A   398    ;  101	static void cli_process_command(char *command)
                           A   399    ;  102	{
000000FE                   A   400    _cli_process_command:
                           A   401    .define "_cli_process_command"
                           A   402    .value _cli_process_command
                           A   403    .class 3
                           A   404    .type 65
                           A   405    .type 0
                           A   406    .endef
                           A   407    .begfunc "cli_process_command",102,"_cli_process_command"
000000FE 0804              A   408    	LINK	#4
                           A   409    .line 102
00000100 57E1              A   410    	LD.W	-2(R14),R1
                           A   411    .define "command"
                           A   412    .class 9
                           A   413    .value -2
                           A   414    .type 140
                           A   415    .type 0
                           A   416    .endef
                           A   417    .define "token_end"
                           A   418    .class 1
                           A   419    .value -4
                           A   420    .type 140
                           A   421    .type 0
                           A   422    .endef
                           A   423    ;  103		char *token_end;
                           A   424    ;  104	
                           A   425    ;  105		//strip spaces and tabs
                           A   426    ;  106		while(isspace(*command)) {
00000102                   A   427    _3_L_21:
                           A   428    .line 106
00000102 6FE0              A   429    	LD.SW	R0,-2(R14)
00000104 1801              A   430    	LD.UB	R1,(R0)
00000106 F1 FFFF7B         A   431    	CALL	_isspace
0000010A 9000              A   432    	CP	R0,#0
0000010C E6 03             A   433    	JP	EQ,_3_L_23
                           A   434    ;  107			++command;
                           A   435    .line 107
0000010E ADEE 7FFE         A   436    	INC.W	-2(R14)
                           A   437    ;  108		}
                           A   438    .line 108
00000112 CFF7              A   439    	JP	_3_L_21
00000114                   A   440    _3_L_23:
                           A   441    ;  109	
ZiLOG ZNEO Macro Assembler Version 1.10 (07022203)                                               27-Feb-11     17:33:57     page:  10


PC     Object              I  Line    Source cli.src
                           A   442    ;  110		token_end = command;
                           A   443    .line 110
00000114 6FE0              A   444    	LD.SW	R0,-2(R14)
00000116 57C0              A   445    	LD.W	-4(R14),R0
                           A   446    ;  111		while(isgraph(*token_end) && *token_end != '\t') {	//bug with isgraph, returns true on
00000118                   A   447    _3_L_26:
                           A   448    .line 111
00000118 6FC0              A   449    	LD.SW	R0,-4(R14)
0000011A 1801              A   450    	LD.UB	R1,(R0)
0000011C F1 FFFF70         A   451    	CALL	_isgraph
00000120 9000              A   452    	CP	R0,#0
00000122 E6 07             A   453    	JP	EQ,_3_L_51
00000124 6FC0              A   454    	LD.SW	R0,-4(R14)
00000126 1800              A   455    	LD.UB	R0,(R0)
00000128 9009              A   456    	CP	R0,#9
0000012A E6 03             A   457    	JP	EQ,_3_L_51
                           A   458    ;  112			token_end++;
                           A   459    .line 112
0000012C ADEE 7FFC         A   460    	INC.W	-4(R14)
                           A   461    ;  113		}
                           A   462    .line 113
00000130 CFF3              A   463    	JP	_3_L_26
00000132                   A   464    _3_L_51:
                           A   465    ;  114	
                           A   466    ;  115		if(token_end != command) {
                           A   467    .line 115
00000132 6FE0              A   468    	LD.SW	R0,-2(R14)
00000134 7D0E DFFC         A   469    	CP.W	-4(R14),R0
00000138 E6 65             A   470    	JP	EQ,_3_L_52
                           A   471    ;  116			*token_end = '\0';
                           A   472    .line 116
0000013A 6FC0              A   473    	LD.SW	R0,-4(R14)
0000013C AC00              A   474    	CLR.B	(R0)
                           A   475    ;  117	
                           A   476    ;  118			++token_end;
                           A   477    .line 118
0000013E ADEE 7FFC         A   478    	INC.W	-4(R14)
                           A   479    ;  119			if(strcmp(command, "info") == 0) {
                           A   480    .line 119
00000142 6FE1              A   481    	LD.SW	R1,-2(R14)
00000144 4502 003F         A   482    	LD	R2,#L__19
00000148 F1 FFFF5A         A   483    	CALL	_strcmp
0000014C 9000              A   484    	CP	R0,#0
0000014E EE 02             A   485    	JP	NE,_3_L_49
                           A   486    ;  120				cli_command_info();
                           A   487    .line 120
00000150 D0C7              A   488    	CALL	_cli_command_info
                           A   489    ;  121			}
                           A   490    ;  122			else if(strcmp(command, "?") == 0) {
                           A   491    .line 122
00000152 C058              A   492    	JP	_3_L_52
00000154                   A   493    _3_L_49:
ZiLOG ZNEO Macro Assembler Version 1.10 (07022203)                                               27-Feb-11     17:33:57     page:  11


PC     Object              I  Line    Source cli.src
00000154 6FE1              A   494    	LD.SW	R1,-2(R14)
00000156 4502 0044         A   495    	LD	R2,#L__21
0000015A F1 FFFF51         A   496    	CALL	_strcmp
0000015E 9000              A   497    	CP	R0,#0
00000160 EE 02             A   498    	JP	NE,_3_L_47
                           A   499    ;  123				cli_command_question();
                           A   500    .line 123
00000162 D052              A   501    	CALL	_cli_command_question
                           A   502    ;  124			}
                           A   503    ;  125			else if(strcmp(command, "echo") == 0) {
                           A   504    .line 125
00000164 C04F              A   505    	JP	_3_L_52
00000166                   A   506    _3_L_47:
00000166 6FE1              A   507    	LD.SW	R1,-2(R14)
00000168 4502 0046         A   508    	LD	R2,#L__23
0000016C F1 FFFF48         A   509    	CALL	_strcmp
00000170 9000              A   510    	CP	R0,#0
00000172 EE 03             A   511    	JP	NE,_3_L_45
                           A   512    ;  126				cli_command_echo(token_end);
                           A   513    .line 126
00000174 6FC1              A   514    	LD.SW	R1,-4(R14)
00000176 D0B9              A   515    	CALL	_cli_command_echo
                           A   516    ;  127			}
                           A   517    ;  128			else if(strcmp(command, "display") == 0) {
                           A   518    .line 128
00000178 C045              A   519    	JP	_3_L_52
0000017A                   A   520    _3_L_45:
0000017A 6FE1              A   521    	LD.SW	R1,-2(R14)
0000017C 4502 004B         A   522    	LD	R2,#L__25
00000180 F1 FFFF3E         A   523    	CALL	_strcmp
00000184 9000              A   524    	CP	R0,#0
00000186 EE 03             A   525    	JP	NE,_3_L_43
                           A   526    ;  129				cli_command_display(token_end);
                           A   527    .line 129
00000188 6FC1              A   528    	LD.SW	R1,-4(R14)
0000018A D0DF              A   529    	CALL	_cli_command_display
                           A   530    ;  130			}
                           A   531    ;  131			else if(strcmp(command, "set") == 0) {
                           A   532    .line 131
0000018C C03B              A   533    	JP	_3_L_52
0000018E                   A   534    _3_L_43:
0000018E 6FE1              A   535    	LD.SW	R1,-2(R14)
00000190 4502 0053         A   536    	LD	R2,#L__27
00000194 F1 FFFF34         A   537    	CALL	_strcmp
00000198 9000              A   538    	CP	R0,#0
0000019A E6 34             A   539    	JP	EQ,_3_L_52
                           A   540    ;  132				
                           A   541    ;  133			}
                           A   542    ;  134			else if(strcmp(command, "hex") == 0) {
                           A   543    .line 134
0000019C 6FE1              A   544    	LD.SW	R1,-2(R14)
0000019E 4502 0057         A   545    	LD	R2,#L__29
ZiLOG ZNEO Macro Assembler Version 1.10 (07022203)                                               27-Feb-11     17:33:57     page:  12


PC     Object              I  Line    Source cli.src
000001A2 F1 FFFF2D         A   546    	CALL	_strcmp
000001A6 9000              A   547    	CP	R0,#0
000001A8 EE 03             A   548    	JP	NE,_3_L_39
                           A   549    ;  135				cli_command_hex(token_end);
                           A   550    .line 135
000001AA 6FC1              A   551    	LD.SW	R1,-4(R14)
000001AC D0FA              A   552    	CALL	_cli_command_hex
                           A   553    ;  136			}
                           A   554    ;  137			else if(strcmp(command, "set") == 0) {
                           A   555    .line 137
000001AE C02A              A   556    	JP	_3_L_52
000001B0                   A   557    _3_L_39:
000001B0 6FE1              A   558    	LD.SW	R1,-2(R14)
000001B2 4502 005B         A   559    	LD	R2,#L__31
000001B6 F1 FFFF23         A   560    	CALL	_strcmp
000001BA 9000              A   561    	CP	R0,#0
000001BC E6 23             A   562    	JP	EQ,_3_L_52
                           A   563    ;  138				
                           A   564    ;  139			}
                           A   565    ;  140			else if(strcmp(command, "switch") == 0) {
                           A   566    .line 140
000001BE 6FE1              A   567    	LD.SW	R1,-2(R14)
000001C0 4502 005F         A   568    	LD	R2,#L__33
000001C4 F1 FFFF1C         A   569    	CALL	_strcmp
000001C8 9000              A   570    	CP	R0,#0
000001CA E6 1C             A   571    	JP	EQ,_3_L_52
                           A   572    ;  141				
                           A   573    ;  142			}
                           A   574    ;  143			else if(strcmp(command, "port") == 0) {
                           A   575    .line 143
000001CC 6FE1              A   576    	LD.SW	R1,-2(R14)
000001CE 4502 0066         A   577    	LD	R2,#L__35
000001D2 F1 FFFF15         A   578    	CALL	_strcmp
000001D6 9000              A   579    	CP	R0,#0
000001D8 E6 15             A   580    	JP	EQ,_3_L_52
                           A   581    ;  144				
                           A   582    ;  145			}
                           A   583    ;  146			else if(strcmp(command, "timer") == 0) {
                           A   584    .line 146
000001DA 6FE1              A   585    	LD.SW	R1,-2(R14)
000001DC 4502 006B         A   586    	LD	R2,#L__37
000001E0 F1 FFFF0E         A   587    	CALL	_strcmp
000001E4 9000              A   588    	CP	R0,#0
000001E6 E6 0E             A   589    	JP	EQ,_3_L_52
                           A   590    ;  147				
                           A   591    ;  148			}
                           A   592    ;  149			else if(strcmp(command, "uart0") == 0) {
                           A   593    .line 149
000001E8 6FE1              A   594    	LD.SW	R1,-2(R14)
000001EA 4502 0071         A   595    	LD	R2,#L__39
000001EE F1 FFFF07         A   596    	CALL	_strcmp
000001F2 9000              A   597    	CP	R0,#0
ZiLOG ZNEO Macro Assembler Version 1.10 (07022203)                                               27-Feb-11     17:33:57     page:  13


PC     Object              I  Line    Source cli.src
000001F4 E6 07             A   598    	JP	EQ,_3_L_52
                           A   599    ;  150				
                           A   600    ;  151			}
                           A   601    ;  152			else {
                           A   602    .line 152
                           A   603    ;  153				uart_printf("--Command:%s, not found. Enter \"?\" to see a list of available co
                           A   604    .line 153
000001F6 6FE0              A   605    	LD.SW	R0,-2(R14)
000001F8 160F              A   606    	PUSH.W	R0
000001FA 098F 0077         A   607    	PUSH.W	#L__41
000001FE F1 FFFEFF         A   608    	CALL	_uart_printf
00000202 8F04              A   609    	ADD	R15,#4
                           A   610    ;  154			}
                           A   611    ;  155		}
                           A   612    ;  156	}
00000204                   A   613    _3_L_52:
                           A   614    .line 156
00000204 0001              A   615    	UNLINK	
00000206 FFFC              A   616    	RET	
                           A   617    
                           A   618    
                           A   619    ;**************************** _cli_process_command ***************************
                           A   620    ;Name                         Addr/Register   Size   Type
                           A   621    ;_uart_printf                        IMPORT  -----   function
                           A   622    ;_cli_command_hex                    STATIC  -----   function
                           A   623    ;_cli_command_display                STATIC  -----   function
                           A   624    ;_cli_command_echo                   STATIC  -----   function
                           A   625    ;_cli_command_question               STATIC  -----   function
                           A   626    ;_cli_command_info                   STATIC  -----   function
                           A   627    ;_strcmp                             IMPORT  -----   function
                           A   628    ;_isgraph                            IMPORT  -----   function
                           A   629    ;_isspace                            IMPORT  -----   function
                           A   630    ;token_end                            R14-4      2   variable
                           A   631    ;command                              R14-2      2   parameter
                           A   632    
                           A   633    
                           A   634    ; Aggregate Stack Size: -4 (words)
                           A   635    
                           A   636    
                           A   637    .endfunc "cli_process_command",156,"_cli_process_command"
                           A   638    	SEGMENT ROM_TEXT
000000C0                   A   639    L__43:
000000C0 0A                A   640    	DB	10
000000C1 41766169          A   641    	DB	"Available Commands:"
000000C5 6C61626C 
000000C9 6520436F 
000000CD 6D6D616E 64733A 
000000D4 0A0A00            A   642    	DB	10,10,0
000000D7                   A   643    L__44:
000000D7 6563686F          A   644    	DB	"echo [\"text\"]"
000000DB 205B2274 
000000DF 65787422 5D 
ZiLOG ZNEO Macro Assembler Version 1.10 (07022203)                                               27-Feb-11     17:33:57     page:  14


PC     Object              I  Line    Source cli.src
000000E4 0A00              A   645    	DB	10,0
000000E6                   A   646    L__45:
000000E6 202D4563          A   647    	DB	" -Echos text back to the serial port."
000000EA 686F7320 
000000EE 74657874 
000000F2 20626163 
000000F6 6B20746F 
000000FA 20746865 
000000FE 20736572 
00000102 69616C20 
00000106 706F7274 2E 
0000010B 0A00              A   648    	DB	10,0
0000010D                   A   649    L__46:
0000010D 64697370          A   650    	DB	"display [\"text\"]"
00000111 6C617920 
00000115 5B227465 
00000119 7874225D 
0000011D 0A00              A   651    	DB	10,0
0000011F                   A   652    L__47:
0000011F 202D4469          A   653    	DB	" -Display text on the LEDs."
00000123 73706C61 
00000127 79207465 
0000012B 7874206F 
0000012F 6E207468 
00000133 65204C45 44732E 
0000013A 0A00              A   654    	DB	10,0
0000013C                   A   655    L__48:
0000013C 73657420          A   656    	DB	"set prompt [\"text\"]"
00000140 70726F6D 
00000144 7074205B 
00000148 22746578 74225D 
0000014F 0A00              A   657    	DB	10,0
00000151                   A   658    L__49:
00000151 202D5365          A   659    	DB	" -Set the CLI prompt to text."
00000155 74207468 
00000159 6520434C 
0000015D 49207072 
00000161 6F6D7074 
00000165 20746F20 
00000169 74657874 2E 
0000016E 0A00              A   660    	DB	10,0
00000170                   A   661    L__50:
00000170 68657820          A   662    	DB	"hex [decimal number]"
00000174 5B646563 
00000178 696D616C 
0000017C 206E756D 
00000180 6265725D 
00000184 0A00              A   663    	DB	10,0
00000186                   A   664    L__51:
00000186 202D4469          A   665    	DB	" -Display a decimal number in hex on the LEDs."
0000018A 73706C61 
0000018E 79206120 
ZiLOG ZNEO Macro Assembler Version 1.10 (07022203)                                               27-Feb-11     17:33:57     page:  15


PC     Object              I  Line    Source cli.src
00000192 64656369 
00000196 6D616C20 
0000019A 6E756D62 
0000019E 65722069 
000001A2 6E206865 
000001A6 78206F6E 
000001AA 20746865 
000001AE 204C4544 732E 
000001B4 0A00              A   666    	DB	10,0
000001B6                   A   667    L__52:
000001B6 73776974          A   668    	DB	"switch [0-2] [\"text\"]"
000001BA 6368205B 
000001BE 302D325D 
000001C2 205B2274 
000001C6 65787422 5D 
000001CB 0A00              A   669    	DB	10,0
000001CD                   A   670    L__53:
000001CD 202D4173          A   671    	DB	" -Assigns the text macro to a button."
000001D1 7369676E 
000001D5 73207468 
000001D9 65207465 
000001DD 7874206D 
000001E1 6163726F 
000001E5 20746F20 
000001E9 61206275 
000001ED 74746F6E 2E 
000001F2 0A00              A   672    	DB	10,0
000001F4                   A   673    L__54:
000001F4 706F7274          A   674    	DB	"port [A-K]"
000001F8 205B412D 4B5D 
000001FE 0A00              A   675    	DB	10,0
00000200                   A   676    L__55:
00000200 202D4469          A   677    	DB	" -Display the current state of the port."
00000204 73706C61 
00000208 79207468 
0000020C 65206375 
00000210 7272656E 
00000214 74207374 
00000218 61746520 
0000021C 6F662074 
00000220 68652070 
00000224 6F72742E 
00000228 0A00              A   678    	DB	10,0
0000022A                   A   679    L__56:
0000022A 74696D65          A   680    	DB	"timer [0-2]"
0000022E 72205B30 2D325D 
00000235 0A00              A   681    	DB	10,0
00000237                   A   682    L__57:
00000237 202D4469          A   683    	DB	" -Display the current state of the timer."
0000023B 73706C61 
0000023F 79207468 
00000243 65206375 
ZiLOG ZNEO Macro Assembler Version 1.10 (07022203)                                               27-Feb-11     17:33:57     page:  16


PC     Object              I  Line    Source cli.src
00000247 7272656E 
0000024B 74207374 
0000024F 61746520 
00000253 6F662074 
00000257 68652074 
0000025B 696D6572 2E 
00000260 0A00              A   684    	DB	10,0
00000262                   A   685    L__58:
00000262 75617274          A   686    	DB	"uart0 [speed [baudrate]] [parity [even|odd|none]] [bits [7|8]]"
00000266 30205B73 
0000026A 70656564 
0000026E 205B6261 
00000272 75647261 
00000276 74655D5D 
0000027A 205B7061 
0000027E 72697479 
00000282 205B6576 
00000286 656E7C6F 
0000028A 64647C6E 
0000028E 6F6E655D 
00000292 5D205B62 
00000296 69747320 
0000029A 5B377C38 5D5D 
000002A0 0A00              A   687    	DB	10,0
000002A2                   A   688    L__59:
000002A2 202D5365          A   689    	DB	" -Set the uart0 settings."
000002A6 74207468 
000002AA 65207561 
000002AE 72743020 
000002B2 73657474 
000002B6 696E6773 2E 
000002BB 0A00              A   690    	DB	10,0
000002BD                   A   691    L__60:
000002BD 696E666F          A   692    	DB	"info"
000002C1 0A00              A   693    	DB	10,0
000002C3                   A   694    L__61:
000002C3 202D4469          A   695    	DB	" -Displays various system information."
000002C7 73706C61 
000002CB 79732076 
000002CF 6172696F 
000002D3 75732073 
000002D7 79737465 
000002DB 6D20696E 
000002DF 666F726D 
000002E3 6174696F 6E2E 
000002E9 0A00              A   696    	DB	10,0
000002EB                   A   697    L__62:
000002EB 3F                A   698    	DB	"?"
000002EC 0A00              A   699    	DB	10,0
000002EE                   A   700    L__63:
000002EE 202D4469          A   701    	DB	" -Displays a menu of CLI commands."
000002F2 73706C61 
ZiLOG ZNEO Macro Assembler Version 1.10 (07022203)                                               27-Feb-11     17:33:57     page:  17


PC     Object              I  Line    Source cli.src
000002F6 79732061 
000002FA 206D656E 
000002FE 75206F66 
00000302 20434C49 
00000306 20636F6D 
0000030A 6D616E64 732E 
00000310 0A00              A   702    	DB	10,0
                           A   703    	SEGMENT CODE
                           A   704    ;  157	
                           A   705    ;  158	static void cli_command_question(void)
                           A   706    ;  159	{
00000208                   A   707    _cli_command_question:
                           A   708    .define "_cli_command_question"
                           A   709    .value _cli_command_question
                           A   710    .class 3
                           A   711    .type 65
                           A   712    .type 0
                           A   713    .endef
                           A   714    .begfunc "cli_command_question",159,"_cli_command_question"
00000208 0800              A   715    	LINK	#0
                           A   716    ;  160		uart_printf("\nAvailable Commands:\n\n");
                           A   717    .line 160
0000020A 098F 00C0         A   718    	PUSH.W	#L__43
0000020E F1 FFFEF7         A   719    	CALL	_uart_printf
00000212 8F02              A   720    	ADD	R15,#2
                           A   721    ;  161	
                           A   722    ;  162		uart_printf("echo [\"text\"]\n");
                           A   723    .line 162
00000214 098F 00D7         A   724    	PUSH.W	#L__44
00000218 F1 FFFEF2         A   725    	CALL	_uart_printf
0000021C 8F02              A   726    	ADD	R15,#2
                           A   727    ;  163		uart_printf(" -Echos text back to the serial port.\n");
                           A   728    .line 163
0000021E 098F 00E6         A   729    	PUSH.W	#L__45
00000222 F1 FFFEED         A   730    	CALL	_uart_printf
00000226 8F02              A   731    	ADD	R15,#2
                           A   732    ;  164	
                           A   733    ;  165		uart_printf("display [\"text\"]\n");
                           A   734    .line 165
00000228 098F 010D         A   735    	PUSH.W	#L__46
0000022C F1 FFFEE8         A   736    	CALL	_uart_printf
00000230 8F02              A   737    	ADD	R15,#2
                           A   738    ;  166		uart_printf(" -Display text on the LEDs.\n");
                           A   739    .line 166
00000232 098F 011F         A   740    	PUSH.W	#L__47
00000236 F1 FFFEE3         A   741    	CALL	_uart_printf
0000023A 8F02              A   742    	ADD	R15,#2
                           A   743    ;  167	
                           A   744    ;  168		uart_printf("set prompt [\"text\"]\n");
                           A   745    .line 168
0000023C 098F 013C         A   746    	PUSH.W	#L__48
00000240 F1 FFFEDE         A   747    	CALL	_uart_printf
ZiLOG ZNEO Macro Assembler Version 1.10 (07022203)                                               27-Feb-11     17:33:57     page:  18


PC     Object              I  Line    Source cli.src
00000244 8F02              A   748    	ADD	R15,#2
                           A   749    ;  169		uart_printf(" -Set the CLI prompt to text.\n");
                           A   750    .line 169
00000246 098F 0151         A   751    	PUSH.W	#L__49
0000024A F1 FFFED9         A   752    	CALL	_uart_printf
0000024E 8F02              A   753    	ADD	R15,#2
                           A   754    ;  170	
                           A   755    ;  171		uart_printf("hex [decimal number]\n");
                           A   756    .line 171
00000250 098F 0170         A   757    	PUSH.W	#L__50
00000254 F1 FFFED4         A   758    	CALL	_uart_printf
00000258 8F02              A   759    	ADD	R15,#2
                           A   760    ;  172		uart_printf(" -Display a decimal number in hex on the LEDs.\n");
                           A   761    .line 172
0000025A 098F 0186         A   762    	PUSH.W	#L__51
0000025E F1 FFFECF         A   763    	CALL	_uart_printf
00000262 8F02              A   764    	ADD	R15,#2
                           A   765    ;  173	
                           A   766    ;  174		uart_printf("switch [0-2] [\"text\"]\n");
                           A   767    .line 174
00000264 098F 01B6         A   768    	PUSH.W	#L__52
00000268 F1 FFFECA         A   769    	CALL	_uart_printf
0000026C 8F02              A   770    	ADD	R15,#2
                           A   771    ;  175		uart_printf(" -Assigns the text macro to a button.\n");
                           A   772    .line 175
0000026E 098F 01CD         A   773    	PUSH.W	#L__53
00000272 F1 FFFEC5         A   774    	CALL	_uart_printf
00000276 8F02              A   775    	ADD	R15,#2
                           A   776    ;  176	
                           A   777    ;  177		uart_printf("port [A-K]\n");
                           A   778    .line 177
00000278 098F 01F4         A   779    	PUSH.W	#L__54
0000027C F1 FFFEC0         A   780    	CALL	_uart_printf
00000280 8F02              A   781    	ADD	R15,#2
                           A   782    ;  178		uart_printf(" -Display the current state of the port.\n");
                           A   783    .line 178
00000282 098F 0200         A   784    	PUSH.W	#L__55
00000286 F1 FFFEBB         A   785    	CALL	_uart_printf
0000028A 8F02              A   786    	ADD	R15,#2
                           A   787    ;  179	
                           A   788    ;  180		uart_printf("timer [0-2]\n");
                           A   789    .line 180
0000028C 098F 022A         A   790    	PUSH.W	#L__56
00000290 F1 FFFEB6         A   791    	CALL	_uart_printf
00000294 8F02              A   792    	ADD	R15,#2
                           A   793    ;  181		uart_printf(" -Display the current state of the timer.\n");
                           A   794    .line 181
00000296 098F 0237         A   795    	PUSH.W	#L__57
0000029A F1 FFFEB1         A   796    	CALL	_uart_printf
0000029E 8F02              A   797    	ADD	R15,#2
                           A   798    ;  182	
                           A   799    ;  183		uart_printf("uart0 [speed [baudrate]] [parity [even|odd|none]] [bits [7|8]]\n");
ZiLOG ZNEO Macro Assembler Version 1.10 (07022203)                                               27-Feb-11     17:33:57     page:  19


PC     Object              I  Line    Source cli.src
                           A   800    .line 183
000002A0 098F 0262         A   801    	PUSH.W	#L__58
000002A4 F1 FFFEAC         A   802    	CALL	_uart_printf
000002A8 8F02              A   803    	ADD	R15,#2
                           A   804    ;  184		uart_printf(" -Set the uart0 settings.\n");
                           A   805    .line 184
000002AA 098F 02A2         A   806    	PUSH.W	#L__59
000002AE F1 FFFEA7         A   807    	CALL	_uart_printf
000002B2 8F02              A   808    	ADD	R15,#2
                           A   809    ;  185	
                           A   810    ;  186		uart_printf("info\n");
                           A   811    .line 186
000002B4 098F 02BD         A   812    	PUSH.W	#L__60
000002B8 F1 FFFEA2         A   813    	CALL	_uart_printf
000002BC 8F02              A   814    	ADD	R15,#2
                           A   815    ;  187		uart_printf(" -Displays various system information.\n");
                           A   816    .line 187
000002BE 098F 02C3         A   817    	PUSH.W	#L__61
000002C2 F1 FFFE9D         A   818    	CALL	_uart_printf
000002C6 8F02              A   819    	ADD	R15,#2
                           A   820    ;  188	
                           A   821    ;  189		uart_printf("?\n");
                           A   822    .line 189
000002C8 098F 02EB         A   823    	PUSH.W	#L__62
000002CC F1 FFFE98         A   824    	CALL	_uart_printf
000002D0 8F02              A   825    	ADD	R15,#2
                           A   826    ;  190		uart_printf(" -Displays a menu of CLI commands.\n");
                           A   827    .line 190
000002D2 098F 02EE         A   828    	PUSH.W	#L__63
000002D6 F1 FFFE93         A   829    	CALL	_uart_printf
000002DA 8F02              A   830    	ADD	R15,#2
                           A   831    ;  191	}
                           A   832    .line 191
000002DC 0001              A   833    	UNLINK	
000002DE FFFC              A   834    	RET	
                           A   835    
                           A   836    
                           A   837    ;**************************** _cli_command_question ***************************
                           A   838    ;Name                         Addr/Register   Size   Type
                           A   839    ;_uart_printf                        IMPORT  -----   function
                           A   840    
                           A   841    
                           A   842    ; Aggregate Stack Size: 0 (words)
                           A   843    
                           A   844    
                           A   845    .endfunc "cli_command_question",191,"_cli_command_question"
                           A   846    ;  192	
                           A   847    ;  193	static void cli_command_info(void)
                           A   848    ;  194	{
000002E0                   A   849    _cli_command_info:
                           A   850    .define "_cli_command_info"
                           A   851    .value _cli_command_info
ZiLOG ZNEO Macro Assembler Version 1.10 (07022203)                                               27-Feb-11     17:33:57     page:  20


PC     Object              I  Line    Source cli.src
                           A   852    .class 3
                           A   853    .type 65
                           A   854    .type 0
                           A   855    .endef
                           A   856    .begfunc "cli_command_info",194,"_cli_command_info"
000002E0 0800              A   857    	LINK	#0
                           A   858    ;  195		info_display();
                           A   859    .line 195
000002E2 F1 FFFE8D         A   860    	CALL	_info_display
                           A   861    ;  196	}
                           A   862    .line 196
000002E6 0001              A   863    	UNLINK	
000002E8 FFFC              A   864    	RET	
                           A   865    
                           A   866    
                           A   867    ;**************************** _cli_command_info ***************************
                           A   868    ;Name                         Addr/Register   Size   Type
                           A   869    ;_info_display                       IMPORT  -----   function
                           A   870    
                           A   871    
                           A   872    ; Aggregate Stack Size: 0 (words)
                           A   873    
                           A   874    
                           A   875    .endfunc "cli_command_info",196,"_cli_command_info"
                           A   876    	SEGMENT ROM_TEXT
00000312                   A   877    L__68:
00000312 3120496E          A   878    	DB	"1 Incorrect format, echo [\"text\"]"
00000316 636F7272 
0000031A 65637420 
0000031E 666F726D 
00000322 61742C20 
00000326 6563686F 
0000032A 205B2274 
0000032E 65787422 5D 
00000333 0A00              A   879    	DB	10,0
00000335                   A   880    L__70:
00000335 3220496E          A   881    	DB	"2 Incorrect format, echo [\"text\"]"
00000339 636F7272 
0000033D 65637420 
00000341 666F726D 
00000345 61742C20 
00000349 6563686F 
0000034D 205B2274 
00000351 65787422 5D 
00000356 0A00              A   882    	DB	10,0
00000358                   A   883    L__71:
00000358 2573              A   884    	DB	"%s"
0000035A 0A00              A   885    	DB	10,0
                           A   886    	SEGMENT CODE
                           A   887    ;  197	
                           A   888    ;  198	static void cli_command_echo(char *text)
                           A   889    ;  199	{
ZiLOG ZNEO Macro Assembler Version 1.10 (07022203)                                               27-Feb-11     17:33:57     page:  21


PC     Object              I  Line    Source cli.src
000002EA                   A   890    _cli_command_echo:
                           A   891    .define "_cli_command_echo"
                           A   892    .value _cli_command_echo
                           A   893    .class 3
                           A   894    .type 65
                           A   895    .type 0
                           A   896    .endef
                           A   897    .begfunc "cli_command_echo",199,"_cli_command_echo"
000002EA 0804              A   898    	LINK	#4
                           A   899    .line 199
000002EC 57E1              A   900    	LD.W	-2(R14),R1
                           A   901    .define "text"
                           A   902    .class 9
                           A   903    .value -2
                           A   904    .type 140
                           A   905    .type 0
                           A   906    .endef
                           A   907    .define "end"
                           A   908    .class 1
                           A   909    .value -4
                           A   910    .type 140
                           A   911    .type 0
                           A   912    .endef
                           A   913    ;  200		char *end;
                           A   914    ;  201	
                           A   915    ;  202		//strip spaces and tabs
                           A   916    ;  203		while(isspace(*text)) {
000002EE                   A   917    _6_L_55:
                           A   918    .line 203
000002EE 6FE0              A   919    	LD.SW	R0,-2(R14)
000002F0 1801              A   920    	LD.UB	R1,(R0)
000002F2 F1 FFFE85         A   921    	CALL	_isspace
000002F6 9000              A   922    	CP	R0,#0
000002F8 E6 03             A   923    	JP	EQ,_6_L_58
                           A   924    ;  204			++text;
                           A   925    .line 204
000002FA ADEE 7FFE         A   926    	INC.W	-2(R14)
                           A   927    ;  205		}
                           A   928    .line 205
000002FE CFF7              A   929    	JP	_6_L_55
00000300                   A   930    _6_L_58:
                           A   931    ;  206	
                           A   932    ;  207		if(*text != '"') {
                           A   933    .line 207
00000300 6FE0              A   934    	LD.SW	R0,-2(R14)
00000302 1800              A   935    	LD.UB	R0,(R0)
00000304 9022              A   936    	CP	R0,#34
00000306 E6 06             A   937    	JP	EQ,_6_L_60
                           A   938    ;  208			uart_printf("1 Incorrect format, echo [\"text\"]\n");
                           A   939    .line 208
00000308 098F 0312         A   940    	PUSH.W	#L__68
0000030C F1 FFFE78         A   941    	CALL	_uart_printf
ZiLOG ZNEO Macro Assembler Version 1.10 (07022203)                                               27-Feb-11     17:33:57     page:  22


PC     Object              I  Line    Source cli.src
00000310 8F02              A   942    	ADD	R15,#2
                           A   943    ;  209			return;
                           A   944    .line 209
00000312 C019              A   945    	JP	_6_L_63
                           A   946    ;  210		}
00000314                   A   947    _6_L_60:
                           A   948    .line 210
                           A   949    ;  211		text++;
                           A   950    .line 211
00000314 ADEE 7FFE         A   951    	INC.W	-2(R14)
                           A   952    ;  212	
                           A   953    ;  213		end = strchr(text, '"');
                           A   954    .line 213
00000318 6FE1              A   955    	LD.SW	R1,-2(R14)
0000031A 3222              A   956    	LD	R2,#34
0000031C F1 FFFE70         A   957    	CALL	_strchr
00000320 57C0              A   958    	LD.W	-4(R14),R0
                           A   959    ;  214		if(end == NULL) {
                           A   960    .line 214
00000322 ADDE 7FFC         A   961    	CPZ.W	-4(R14)
00000326 EE 06             A   962    	JP	NE,_6_L_62
                           A   963    ;  215			uart_printf("2 Incorrect format, echo [\"text\"]\n");
                           A   964    .line 215
00000328 098F 0335         A   965    	PUSH.W	#L__70
0000032C F1 FFFE68         A   966    	CALL	_uart_printf
00000330 8F02              A   967    	ADD	R15,#2
                           A   968    ;  216			return;
                           A   969    .line 216
00000332 C009              A   970    	JP	_6_L_63
                           A   971    ;  217		}
00000334                   A   972    _6_L_62:
                           A   973    .line 217
                           A   974    ;  218		*end = '\0';
                           A   975    .line 218
00000334 6FC0              A   976    	LD.SW	R0,-4(R14)
00000336 AC00              A   977    	CLR.B	(R0)
                           A   978    ;  219	
                           A   979    ;  220		uart_printf("%s\n", text);
                           A   980    .line 220
00000338 6FE0              A   981    	LD.SW	R0,-2(R14)
0000033A 160F              A   982    	PUSH.W	R0
0000033C 098F 0358         A   983    	PUSH.W	#L__71
00000340 F1 FFFE5E         A   984    	CALL	_uart_printf
00000344 8F04              A   985    	ADD	R15,#4
                           A   986    ;  221	}
00000346                   A   987    _6_L_63:
                           A   988    .line 221
00000346 0001              A   989    	UNLINK	
00000348 FFFC              A   990    	RET	
                           A   991    
                           A   992    
                           A   993    ;**************************** _cli_command_echo ***************************
ZiLOG ZNEO Macro Assembler Version 1.10 (07022203)                                               27-Feb-11     17:33:57     page:  23


PC     Object              I  Line    Source cli.src
                           A   994    ;Name                         Addr/Register   Size   Type
                           A   995    ;_strchr                             IMPORT  -----   function
                           A   996    ;_uart_printf                        IMPORT  -----   function
                           A   997    ;_isspace                            IMPORT  -----   function
                           A   998    ;end                                  R14-4      2   variable
                           A   999    ;text                                 R14-2      2   parameter
                           A  1000    
                           A  1001    
                           A  1002    ; Aggregate Stack Size: -4 (words)
                           A  1003    
                           A  1004    
                           A  1005    .endfunc "cli_command_echo",221,"_cli_command_echo"
                           A  1006    	SEGMENT ROM_TEXT
0000035C                   A  1007    L__75:
0000035C 3120496E          A  1008    	DB	"1 Incorrect format, display [\"text\"]"
00000360 636F7272 
00000364 65637420 
00000368 666F726D 
0000036C 61742C20 
00000370 64697370 
00000374 6C617920 
00000378 5B227465 
0000037C 7874225D 
00000380 0A00              A  1009    	DB	10,0
00000382                   A  1010    L__77:
00000382 3220496E          A  1011    	DB	"2 Incorrect format, display [\"text\"]"
00000386 636F7272 
0000038A 65637420 
0000038E 666F726D 
00000392 61742C20 
00000396 64697370 
0000039A 6C617920 
0000039E 5B227465 
000003A2 7874225D 
000003A6 0A00              A  1012    	DB	10,0
                           A  1013    	SEGMENT CODE
                           A  1014    ;  222	
                           A  1015    ;  223	static void cli_command_display(char *text)
                           A  1016    ;  224	{
0000034A                   A  1017    _cli_command_display:
                           A  1018    .define "_cli_command_display"
                           A  1019    .value _cli_command_display
                           A  1020    .class 3
                           A  1021    .type 65
                           A  1022    .type 0
                           A  1023    .endef
                           A  1024    .begfunc "cli_command_display",224,"_cli_command_display"
0000034A 0804              A  1025    	LINK	#4
                           A  1026    .line 224
0000034C 57E1              A  1027    	LD.W	-2(R14),R1
                           A  1028    .define "text"
                           A  1029    .class 9
ZiLOG ZNEO Macro Assembler Version 1.10 (07022203)                                               27-Feb-11     17:33:57     page:  24


PC     Object              I  Line    Source cli.src
                           A  1030    .value -2
                           A  1031    .type 140
                           A  1032    .type 0
                           A  1033    .endef
                           A  1034    .define "end"
                           A  1035    .class 1
                           A  1036    .value -4
                           A  1037    .type 140
                           A  1038    .type 0
                           A  1039    .endef
                           A  1040    ;  225		char *end;
                           A  1041    ;  226	
                           A  1042    ;  227		//strip spaces and tabs
                           A  1043    ;  228		while(isspace(*text)) {
0000034E                   A  1044    _7_L_64:
                           A  1045    .line 228
0000034E 6FE0              A  1046    	LD.SW	R0,-2(R14)
00000350 1801              A  1047    	LD.UB	R1,(R0)
00000352 F1 FFFE55         A  1048    	CALL	_isspace
00000356 9000              A  1049    	CP	R0,#0
00000358 E6 03             A  1050    	JP	EQ,_7_L_67
                           A  1051    ;  229			++text;
                           A  1052    .line 229
0000035A ADEE 7FFE         A  1053    	INC.W	-2(R14)
                           A  1054    ;  230		}
                           A  1055    .line 230
0000035E CFF7              A  1056    	JP	_7_L_64
00000360                   A  1057    _7_L_67:
                           A  1058    ;  231	
                           A  1059    ;  232		if(*text != '"') {
                           A  1060    .line 232
00000360 6FE0              A  1061    	LD.SW	R0,-2(R14)
00000362 1800              A  1062    	LD.UB	R0,(R0)
00000364 9022              A  1063    	CP	R0,#34
00000366 E6 06             A  1064    	JP	EQ,_7_L_69
                           A  1065    ;  233			uart_printf("1 Incorrect format, display [\"text\"]\n");
                           A  1066    .line 233
00000368 098F 035C         A  1067    	PUSH.W	#L__75
0000036C F1 FFFE48         A  1068    	CALL	_uart_printf
00000370 8F02              A  1069    	ADD	R15,#2
                           A  1070    ;  234			return;
                           A  1071    .line 234
00000372 C015              A  1072    	JP	_7_L_72
                           A  1073    ;  235		}
00000374                   A  1074    _7_L_69:
                           A  1075    .line 235
                           A  1076    ;  236		text++;
                           A  1077    .line 236
00000374 ADEE 7FFE         A  1078    	INC.W	-2(R14)
                           A  1079    ;  237	
                           A  1080    ;  238		end = strchr(text, '"');
                           A  1081    .line 238
ZiLOG ZNEO Macro Assembler Version 1.10 (07022203)                                               27-Feb-11     17:33:57     page:  25


PC     Object              I  Line    Source cli.src
00000378 6FE1              A  1082    	LD.SW	R1,-2(R14)
0000037A 3222              A  1083    	LD	R2,#34
0000037C F1 FFFE40         A  1084    	CALL	_strchr
00000380 57C0              A  1085    	LD.W	-4(R14),R0
                           A  1086    ;  239		if(end == NULL) {
                           A  1087    .line 239
00000382 ADDE 7FFC         A  1088    	CPZ.W	-4(R14)
00000386 EE 06             A  1089    	JP	NE,_7_L_71
                           A  1090    ;  240			uart_printf("2 Incorrect format, display [\"text\"]\n");
                           A  1091    .line 240
00000388 098F 0382         A  1092    	PUSH.W	#L__77
0000038C F1 FFFE38         A  1093    	CALL	_uart_printf
00000390 8F02              A  1094    	ADD	R15,#2
                           A  1095    ;  241			return;
                           A  1096    .line 241
00000392 C005              A  1097    	JP	_7_L_72
                           A  1098    ;  242		}
00000394                   A  1099    _7_L_71:
                           A  1100    .line 242
                           A  1101    ;  243		*end = '\0';
                           A  1102    .line 243
00000394 6FC0              A  1103    	LD.SW	R0,-4(R14)
00000396 AC00              A  1104    	CLR.B	(R0)
                           A  1105    ;  244	
                           A  1106    ;  245		led_display_text(text);
                           A  1107    .line 245
00000398 6FE1              A  1108    	LD.SW	R1,-2(R14)
0000039A F1 FFFE31         A  1109    	CALL	_led_display_text
                           A  1110    ;  246	}
0000039E                   A  1111    _7_L_72:
                           A  1112    .line 246
0000039E 0001              A  1113    	UNLINK	
000003A0 FFFC              A  1114    	RET	
                           A  1115    
                           A  1116    
                           A  1117    ;**************************** _cli_command_display ***************************
                           A  1118    ;Name                         Addr/Register   Size   Type
                           A  1119    ;_led_display_text                   IMPORT  -----   function
                           A  1120    ;_strchr                             IMPORT  -----   function
                           A  1121    ;_uart_printf                        IMPORT  -----   function
                           A  1122    ;_isspace                            IMPORT  -----   function
                           A  1123    ;end                                  R14-4      2   variable
                           A  1124    ;text                                 R14-2      2   parameter
                           A  1125    
                           A  1126    
                           A  1127    ; Aggregate Stack Size: -4 (words)
                           A  1128    
                           A  1129    
                           A  1130    .endfunc "cli_command_display",246,"_cli_command_display"
                           A  1131    	SEGMENT ROM_TEXT
000003A8                   A  1132    L__82:
000003A8 3120496E          A  1133    	DB	"1 Incorrect format, hex [decimal number]"
ZiLOG ZNEO Macro Assembler Version 1.10 (07022203)                                               27-Feb-11     17:33:57     page:  26


PC     Object              I  Line    Source cli.src
000003AC 636F7272 
000003B0 65637420 
000003B4 666F726D 
000003B8 61742C20 
000003BC 68657820 
000003C0 5B646563 
000003C4 696D616C 
000003C8 206E756D 
000003CC 6265725D 
000003D0 0A00              A  1134    	DB	10,0
000003D2                   A  1135    L__84:
000003D2 3220496E          A  1136    	DB	"2 Incorrect format, hex [decimal number]"
000003D6 636F7272 
000003DA 65637420 
000003DE 666F726D 
000003E2 61742C20 
000003E6 68657820 
000003EA 5B646563 
000003EE 696D616C 
000003F2 206E756D 
000003F6 6265725D 
000003FA 0A00              A  1137    	DB	10,0
                           A  1138    	SEGMENT CODE
                           A  1139    ;  247	
                           A  1140    ;  248	static void cli_command_hex(char *text)
                           A  1141    ;  249	{
000003A2                   A  1142    _cli_command_hex:
                           A  1143    .define "_cli_command_hex"
                           A  1144    .value _cli_command_hex
                           A  1145    .class 3
                           A  1146    .type 65
                           A  1147    .type 0
                           A  1148    .endef
                           A  1149    .begfunc "cli_command_hex",249,"_cli_command_hex"
000003A2 0808              A  1150    	LINK	#8
                           A  1151    .line 249
000003A4 57E1              A  1152    	LD.W	-2(R14),R1
                           A  1153    .define "text"
                           A  1154    .class 9
                           A  1155    .value -2
                           A  1156    .type 140
                           A  1157    .type 0
                           A  1158    .endef
                           A  1159    .define "end"
                           A  1160    .class 1
                           A  1161    .value -4
                           A  1162    .type 140
                           A  1163    .type 0
                           A  1164    .endef
                           A  1165    .define "value"
                           A  1166    .class 1
                           A  1167    .value -8
ZiLOG ZNEO Macro Assembler Version 1.10 (07022203)                                               27-Feb-11     17:33:57     page:  27


PC     Object              I  Line    Source cli.src
                           A  1168    .type 5
                           A  1169    .type 0
                           A  1170    .endef
                           A  1171    ;  250		char *end;
                           A  1172    ;  251		int value;
                           A  1173    ;  252	
                           A  1174    ;  253		//strip spaces and tabs
                           A  1175    ;  254		while(isspace(*text)) {
000003A6                   A  1176    _8_L_73:
                           A  1177    .line 254
000003A6 6FE0              A  1178    	LD.SW	R0,-2(R14)
000003A8 1801              A  1179    	LD.UB	R1,(R0)
000003AA F1 FFFE29         A  1180    	CALL	_isspace
000003AE 9000              A  1181    	CP	R0,#0
000003B0 E6 03             A  1182    	JP	EQ,_8_L_75
                           A  1183    ;  255			++text;
                           A  1184    .line 255
000003B2 ADEE 7FFE         A  1185    	INC.W	-2(R14)
                           A  1186    ;  256		}
                           A  1187    .line 256
000003B6 CFF7              A  1188    	JP	_8_L_73
000003B8                   A  1189    _8_L_75:
                           A  1190    ;  257	
                           A  1191    ;  258		end = text;
                           A  1192    .line 258
000003B8 6FE0              A  1193    	LD.SW	R0,-2(R14)
000003BA 57C0              A  1194    	LD.W	-4(R14),R0
                           A  1195    ;  259		while(isdigit(*end)) {
000003BC                   A  1196    _8_L_76:
                           A  1197    .line 259
000003BC 6FC0              A  1198    	LD.SW	R0,-4(R14)
000003BE 1801              A  1199    	LD.UB	R1,(R0)
000003C0 F1 FFFE1E         A  1200    	CALL	_isdigit
000003C4 9000              A  1201    	CP	R0,#0
000003C6 E6 03             A  1202    	JP	EQ,_8_L_78
                           A  1203    ;  260			++end;
                           A  1204    .line 260
000003C8 ADEE 7FFC         A  1205    	INC.W	-4(R14)
                           A  1206    ;  261		}
                           A  1207    .line 261
000003CC CFF7              A  1208    	JP	_8_L_76
000003CE                   A  1209    _8_L_78:
                           A  1210    ;  262		*end = '\0';
                           A  1211    .line 262
000003CE 6FC0              A  1212    	LD.SW	R0,-4(R14)
000003D0 AC00              A  1213    	CLR.B	(R0)
                           A  1214    ;  263	
                           A  1215    ;  264		//is there a number at all
                           A  1216    ;  265		if(text == end) {
                           A  1217    .line 265
000003D2 6FC0              A  1218    	LD.SW	R0,-4(R14)
000003D4 7D0E DFFE         A  1219    	CP.W	-2(R14),R0
ZiLOG ZNEO Macro Assembler Version 1.10 (07022203)                                               27-Feb-11     17:33:57     page:  28


PC     Object              I  Line    Source cli.src
000003D8 EE 06             A  1220    	JP	NE,_8_L_80
                           A  1221    ;  266			uart_printf("1 Incorrect format, hex [decimal number]\n");
                           A  1222    .line 266
000003DA 098F 03A8         A  1223    	PUSH.W	#L__82
000003DE F1 FFFE0F         A  1224    	CALL	_uart_printf
000003E2 8F02              A  1225    	ADD	R15,#2
                           A  1226    ;  267			return;
                           A  1227    .line 267
000003E4 C010              A  1228    	JP	_8_L_83
                           A  1229    ;  268		}
000003E6                   A  1230    _8_L_80:
                           A  1231    .line 268
                           A  1232    ;  269	
                           A  1233    ;  270		//convert string to int
                           A  1234    ;  271		value = atoi(text);
                           A  1235    .line 271
000003E6 6FE1              A  1236    	LD.SW	R1,-2(R14)
000003E8 F1 FFFE0A         A  1237    	CALL	_atoi
000003EC 5B80              A  1238    	LD	-8(R14),R0
                           A  1239    ;  272		if(value == 0) {
                           A  1240    .line 272
000003EE ADDE BFF8         A  1241    	CPZ	-8(R14)
000003F2 EE 06             A  1242    	JP	NE,_8_L_82
                           A  1243    ;  273			uart_printf("2 Incorrect format, hex [decimal number]\n");
                           A  1244    .line 273
000003F4 098F 03D2         A  1245    	PUSH.W	#L__84
000003F8 F1 FFFE02         A  1246    	CALL	_uart_printf
000003FC 8F02              A  1247    	ADD	R15,#2
                           A  1248    ;  274			return;
                           A  1249    .line 274
000003FE C003              A  1250    	JP	_8_L_83
                           A  1251    ;  275		}
00000400                   A  1252    _8_L_82:
                           A  1253    .line 275
                           A  1254    ;  276	
                           A  1255    ;  277		led_display_int_hex(value);
                           A  1256    .line 277
00000400 5F81              A  1257    	LD	R1,-8(R14)
00000402 F1 FFFDFD         A  1258    	CALL	_led_display_int_hex
                           A  1259    ;  278	}
00000406                   A  1260    _8_L_83:
                           A  1261    .line 278
00000406 0001              A  1262    	UNLINK	
00000408 FFFC              A  1263    	RET	
                           A  1264    
                           A  1265    
                           A  1266    ;**************************** _cli_command_hex ***************************
                           A  1267    ;Name                         Addr/Register   Size   Type
                           A  1268    ;_led_display_int_hex                IMPORT  -----   function
                           A  1269    ;_atoi                               IMPORT  -----   function
                           A  1270    ;_uart_printf                        IMPORT  -----   function
                           A  1271    ;_isdigit                            IMPORT  -----   function
ZiLOG ZNEO Macro Assembler Version 1.10 (07022203)                                               27-Feb-11     17:33:57     page:  29


PC     Object              I  Line    Source cli.src
                           A  1272    ;_isspace                            IMPORT  -----   function
                           A  1273    ;value                                R14-8      4   variable
                           A  1274    ;end                                  R14-4      2   variable
                           A  1275    ;text                                 R14-2      2   parameter
                           A  1276    
                           A  1277    
                           A  1278    ; Aggregate Stack Size: -8 (words)
                           A  1279    
                           A  1280    
                           A  1281    .endfunc "cli_command_hex",278,"_cli_command_hex"
                           A  1282    	XREF _isspace:EROM
                           A  1283    	XREF _isgraph:EROM
                           A  1284    	XREF _isdigit:EROM
                           A  1285    	XREF _memset:EROM
                           A  1286    	XREF _strchr:EROM
                           A  1287    	XREF _strcmp:EROM
                           A  1288    	XREF _strcpy:EROM
                           A  1289    	XREF _atoi:EROM
                           A  1290    	XREF _info_display:EROM
                           A  1291    	XREF _init_info:EROM
                           A  1292    	XREF _uart_printf:EROM
                           A  1293    	XREF _uart_getchar:EROM
                           A  1294    	XREF _init_uart:EROM
                           A  1295    	XREF _led_display_int_hex:EROM
                           A  1296    	XREF _led_display_text:EROM
                           A  1297    	XREF _init_leds:EROM
                           A  1298    	XDEF _cli_loop
                           A  1299    	XDEF _init_cli
                           A  1300    	END


Errors: 0
Warnings: 0
Lines Assembled: 1301
